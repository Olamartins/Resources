Créer un projet (dans Eclipse) :

	File > New > Dynamic Web Project
		Nommer le Projet
		New Runtime > Prendre la dernière version de Tomcat (8) > Cocher 'Create a new local server' > Next > Définir le dossier d'installation de Tomcat (/usr/share/tomcat8) > Finish
		> Finish


Architecture du projet :

	WebContent :
		contient les fichiers HTML/CSS/JS et JSP (fichier HTML un peu amélioré par JEE)
		META-INF : Dossier créé par Eclipse pour son organisation perso
		WEB-INF : Dossier incontournable dans toute app Java EE, là où seront placés des fichiers de configuration
		WEB-INF/lib : Là où seront les bibliothèques Java


	Java Resources :
		src : Là où seront écrit les classes Java

Test :

	Créer un fichier index.html dans le dossier WebContent
	Exécuter l'application :
		Clic droit sur le projet > Run As > Run On Server



Créer un Servlet (Le controleur est une servlet):
	-> Classe Java avec des méthodes doGet ou doPost qui reçoivent l'info, de traiter qqchose, et retourner une page

	Clic droit sur src > New > Servlet > Remplir le champ Class name et Java package (si on veut la mettre dans un package) > Finish

	La classe hérite de HttpServlet


	Elle hérite des méthodes doGet et doPost : 
		Selon l'action effectué : 
			- Demander une page (GET)
			- Envoyer un formulaire (POST)

		On va utilisé tel ou tel méthode

	Nous allons créer un fichier xml dans le dossier WEB-INF, qui se nommera web.xml

	Ce fichier va servir à décrire/déclarer notre servlet : 
		- Dans une balise <servlet> avec les balises <servlet-name> (Nom de la servlet) et <servlet-class> (Package du servlet)
		- Dans une balise <servlet-mapping> qui va définir la route vers cette servlet
		avec les balises <servlet-name> et <url-pattern>



Associer une vue à une servlet

	Créer une JSP (page alliant html et java) :
	Clic Droit WEB-INF > New > JSP File > Finish

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		
		this.getServletContext().getRequestDispatcher("/WEB-INF/home.jsp").forward(request, response);
		
	}


Présentation des JSP

	<%@ page pageEncoding="UTF-8" %>

	Transmettre une variable à la vue :

	String msg = "Au revoir";
	request.setAttribute("variable", msg);

	    <p>
        <% 
        	String variable = (String)request.getAttribute("variable");
        	out.println(variable);
        %>
        </p>


Les inclusions de JSP

	<%@ include file="menu.jsp" %>

	<li><a href="/OC_Cours/">Accueil</a></li>



Communiquer des données entre pages

	Récupérer les paramètres GET

	String name = request.getParameter("name");
	request.setAttribute("name", name);

	<p>
	<%
	String name = (String) request.getAttribute("name");
	out.println(name);
	%>
	</p>


Utiliser Expression Language (EL) dans les JSP

	${ name }
	${ 10 * 3 }

	
Manipuler des Java Beans dans les JSP


	Envoyer un objet dans une JSP :
		Auteur auteur = new Auteur("HANOTEL", "Guillaume", false);
		request.setAttribute("auteur", auteur);

	Concatenation :
		${ auteur.prenom += ' ' += auteur.nom }

	Operateur ternaire :
		${ (auteur.actif) ? 'Actif' : 'Inactif' }



Qu'est-ce que la JSTL ?

	Librairie de balises pour éviter d'écrire du Java dans le HTML
	Java Server Standard Tag Library
		-> Core (variables, conditions, boucles)
		-> Format (Formattage de données + internationalisation)
		-> XML
		-> SQL
		-> Functions (Traitement chaine de charactères)

Mettre en place la JSTL 

	En haut des pages JSP :
	<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>

	Mettre la lib jstl dans le projet (dans lib)

	Inclure cette ligne dans tous les fichiers JSP :
		Dans web.xml : 
		  <jsp-config>
		  	<jsp-property-group>
		  		<url-pattern>*.jsp</url-pattern>
		  		<include-prelude>/WEB-INF/taglibs.jsp</include-prelude>
		  	</jsp-property-group>
		  </jsp-config>	

		Dans /WEB-INF/taglibs.jsp :
			<%@ page pageEncoding="UTF-8" %>
			<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>



		<p><c:out value="Bonjour !" /></p>


JSTL et variables :

	- Echappe les caractères chelou (pour éviter failles)
	- Gère valeur par défaut si vide


	<p><c:out value="${ var }" default="valeur par défaut"/></p>
	<p><c:out value="${ var }">valeur par défaut</c:out</p>

	- Définir des variables
	- Valable dans la page courante : page
	- Valable pendant la requete : request
	- Valable pendant la session : session
	- Valable dans toute l'application : application
	<c:set var="pseudo" value="guigui" scope="page"/>
	<c:set var="pseudo" scope="page">guigui</c:out>

	- Modifier un attribut d'un objet java : 
	<c:set target="${ auteur }" property="prenom">NewNameAuteur</c:set>
    <p><c:out value="${ auteur.prenom }"></c:out></p>

    - Supprimer une variable :
    <c:remove var="test" scope="page"/>

JSTL et conditions :

	On ne peut pas utiliser le else
	IF :
	<c:if test="${ 50 > 10 }" var="variable" scope="session">
		C'est vrai !
	</c:if>

	Le résultat du test dans enregistré dans 'variable' (avec un scope)

	CHOOSE :
	<c:choose>
		<c:when test="${ variable }">Du Texte</c:when>
		<c:when test="${ autreVariable }">Du Texte</c:when>
		<c:when test="${ encoreUneAutreVariable }">Du Texte</c:when>
		<c:otherwise>Autre</c:otherwise>
	</c:choose>

JSTL et boucles :
	
	FOR :

	<c:forEach begin="0" end="50" step="10" var="i">
		<p><c:out value="${i }"></c:out></p>
	</c:forEach>
	
	<c:forEach var="item" items="${noms}" begin="0" end="1" varStatus="status">
         <p><c:out value="${ status.count }"> : </c:out><c:out value="${ item }"></c:out></p>
    </c:forEach>

    status : variable qui contient des infos sur la boucle en cours :
    count : compteur qui commence à 1
    index : compteur qui commence à 0
    current : élément courant
    first : si nous sommes dans le 1er elem
    last : si nous sommes au dernier

    Découper une chaine de caractère :

    (on peut mettre plusieurs délimiteurs genre delims="/ ")
    <c:forTokens var="morceau" items="salut foo bar baz toto" delims=" ">
    	<p><c:out value="${ morceau }"/></p>
    </c:forTokens>


Les formulaires :


Envoyer des fichiers :


Gérer les sessions :

	String nom = request.getParameter("nom");
	String prenom = request.getParameter("prenom");
		
	HttpSession session = request.getSession();
	session.setAttribute("nom", nom);
	session.setAttribute("prenom", prenom);

	<c:if test="${ !empty sessionScope.prenom && !empty sessionScope.nom }">
		<p>Vous êtes ${ sessionScope.prenom } ${ sessionScope.nom }</p>
	</c:if>

	Vider la session :
	session.invalidate();


Stocker les cookies :

	Enregistrer un cookie :

		String nom = request.getParameter("nom");
		String prenom = request.getParameter("prenom");
			
		Cookie cookie = new Cookie("prenom", prenom);
		cookie.setMaxAge(60 * 60* 24 * 30);
		response.addCookie(cookie);

	Récupérer un cookie :

		Cookie cookies[] = request.getCookies();
		if(cookies != null) {
			for(Cookie cookie : cookies) {
				if(cookie.getName().equals("prenom")) {
					request.setAttribute("prenom", cookie.getValue());
				}
			}
		}


JDBC et base de données

	

Modele DAO : Data Access Object :

(Zoom sur le Modèle du MVC)

Modèle interragit avec une interface. Il y aura plusieurs implémentation DAO qui implémenteront cette interface. Il y aura une implémentation par type de moyen d'enregistrer les données (MySQL, Oracle, XML, etc...)

Chaque implémentation code les requetes de manières différentes selon le système de gestion.



