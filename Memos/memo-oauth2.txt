https://zestedesavoir.com/articles/1616/comprendre-oauth-2-0-par-lexemple/
https://oauth2.thephpleague.com/authorization-server/which-grant/




Il y a 4 méthodes d'authentification :

- Authorization Code Grant : 

	Le cas d’usage typique pour ce type d’autorisation est lorsque le client est un code coté serveur.
	(Server app)

- Implicit Grant :

	Ce processus est idéal pour les applications clientes dites publiques. Comme pour l’autorisation avec un code, il fait intervenir le client, le propriétaire de la ressource protégée et le serveur d’autorisation.

-  Resource Owner Password Credentials Grant :

	Le seul cas d’usage valide pour cette méthode est lorsque le client et le serveur d’application sont fournis par la même entité (même entreprise, même développeur, etc.).

- Client Credentials Grant

	L’utilisation de ce mode d’autorisation peut s’avérer très utile si un serveur fournit une API publique mais veut ajouter une limitation à l’usage qui est faite par les clients.
	(Machine)


Celui qui nous intéresse est le Password Credentials Grant



Avec Laravel Passport, on a plusieurs tables :

- oauth_clients : 

	Là où sont stockés les clients de l'application, avec leurs types d'authentification. Par défaut, Passport
	nous un "personal access" client et un "password grant" client. Les clients correspondent à "l'application web" ou encore "l'application mobile".

- oauth_personal_access_clients :

	????


- oauth_access_tokens :

	Les tokens d'accès des utilisateurs, lié à un client.

- oauth_auth_codes :

	????

- oauth_refresh_tokens :

	????



On nous crée 2 clients par défaut pour l'application.
